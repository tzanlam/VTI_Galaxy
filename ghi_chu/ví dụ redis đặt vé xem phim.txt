Tôi sẽ giải thích về cách Redis có thể được sử dụng trong hệ thống đặt vé xem phim và các tính năng nổi bật của nó liên quan đến ứng dụng này. Dưới đây là một ví dụ cụ thể và dễ hiểu:

### Ví dụ về Redis trong hệ thống đặt vé xem phim
Hãy tưởng tượng bạn xây dựng một ứng dụng đặt vé xem phim trực tuyến, nơi người dùng có thể chọn suất chiếu, chọn ghế và thanh toán. Redis, với vai trò là một cơ sở dữ liệu NoSQL lưu trữ dữ liệu trong bộ nhớ (in-memory), có thể được sử dụng để tối ưu hóa hiệu suất và đảm bảo tính nhất quán. Dưới đây là cách Redis hoạt động trong kịch bản này:

1. **Quản lý số lượng vé còn lại (Inventory Management):**
   - Redis có thể lưu trữ số lượng vé khả dụng cho mỗi suất chiếu dưới dạng một khóa-giá trị (key-value). Ví dụ:
     ```
     SET "movie:suat1:available_tickets" 50
     ```
   - Khi người dùng đặt vé, bạn có thể dùng lệnh `DECR` để giảm số vé còn lại:
     ```
     DECR "movie:suat1:available_tickets"
     ```
   - Điều này đảm bảo xử lý nhanh chóng và tránh tình trạng bán quá số vé (overbooking) nhờ tính năng atomic (nguyên tử) của Redis.

2. **Khóa ghế tạm thời (Seat Locking):**
   - Khi người dùng chọn một ghế để đặt, Redis có thể sử dụng cấu trúc dữ liệu `SET` để khóa ghế đó trong một khoảng thời gian (ví dụ: 5 phút):
     ```
     SET "movie:suat1:seat:A1" "user123" EX 300
     ```
     (Ở đây, `EX 300` đặt thời gian hết hạn là 300 giây).
   - Nếu người dùng không hoàn tất thanh toán trong 5 phút, khóa tự động hết hạn, và ghế trở lại trạng thái khả dụng.

3. **Hàng đợi đặt vé (Queue Management):**
   - Redis hỗ trợ cấu trúc `List` để quản lý hàng đợi người dùng khi số lượng yêu cầu đặt vé vượt quá khả năng xử lý tức thời:
     ```
     LPUSH "movie:suat1:queue" "user456"
     ```
   - Server có thể lần lượt lấy yêu cầu từ hàng đợi bằng `RPOP` để xử lý.

4. **Lưu trữ phiên người dùng (Session Storage):**
   - Redis có thể lưu thông tin phiên (session) của người dùng khi họ duyệt ứng dụng:
     ```
     HMSET "session:user123" "movie" "suat1" "seat" "A1"
     ```
   - Điều này giúp truy xuất nhanh dữ liệu mà không cần truy vấn cơ sở dữ liệu chính (như MySQL) liên tục.

5. **Bộ nhớ đệm (Caching):**
   - Thông tin phim, suất chiếu, giá vé có thể được lưu trong Redis để giảm tải cho cơ sở dữ liệu chính:
     ```
     SET "movie:info:suat1" "{\"name\": \"Avengers\", \"time\": \"19:00\", \"price\": 120000}"
     ```
   - Khi người dùng truy cập, dữ liệu được lấy từ Redis thay vì truy vấn SQL chậm hơn.

---

### Các tính năng nổi bật của Redis trong ví dụ này
1. **Hiệu suất cao (High Performance):**
   - Redis lưu trữ dữ liệu trong RAM, cho phép truy xuất cực nhanh (microseconds), phù hợp với hệ thống đặt vé cần phản hồi tức thời.

2. **Hỗ trợ nhiều cấu trúc dữ liệu (Data Structures):**
   - Redis không chỉ lưu key-value đơn giản mà còn hỗ trợ Lists, Sets, Hashes, Sorted Sets, v.v., giúp xử lý linh hoạt các tình huống như khóa ghế, hàng đợi, hay xếp hạng phim.

3. **Atomic Operations:**
   - Các lệnh như `INCR`, `DECR`, hay `SETNX` đảm bảo không có xung đột khi nhiều người dùng đặt vé cùng lúc (race condition).

4. **Hết hạn tự động (Expiration):**
   - Tính năng TTL (Time To Live) rất hữu ích để tự động giải phóng ghế bị khóa nếu người dùng không hoàn tất giao dịch.

5. **Khả năng mở rộng (Scalability):**
   - Redis hỗ trợ Redis Cluster, cho phép mở rộng hệ thống khi lượng người dùng tăng đột biến (như lúc mở bán vé phim hot).

6. **Pub/Sub (Publish/Subscribe):**
   - Có thể dùng để thông báo realtime cho người dùng khi vé được xác nhận hoặc khi có cập nhật về suất chiếu:
     ```
     PUBLISH "movie:suat1:updates" "Vé A1 đã được đặt thành công"
     ```

---

### Kết luận
Redis là lựa chọn lý tưởng cho hệ thống đặt vé xem phim nhờ tốc độ, tính linh hoạt và khả năng xử lý đồng thời cao. Trong thực tế, nó thường được kết hợp với một cơ sở dữ liệu bền vững (như PostgreSQL) để lưu trữ lâu dài, trong khi Redis đảm nhận phần xử lý nhanh và tạm thời. Bạn có muốn tôi đi sâu hơn vào một phần cụ thể không?